{"ast":null,"code":"function randomize(json) {\n  return json[Math.floor(Math.random() * json.length)];\n}\n\nexport async function getFoodById(id) {\n  const url = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`;\n  const responseApi = await fetch(url);\n  const json = await responseApi.json();\n  return json.meals;\n}\nexport default async function getBreakfasts() {\n  const url = 'https://www.themealdb.com/api/json/v1/1/filter.php?c=breakfast';\n  const responseApi = await fetch(url);\n  const json = await responseApi.json();\n  const result = await getFoodById(randomize(json.meals).idMeal);\n  return result;\n}\nexport async function getRandomFoods() {\n  const url = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n  const responseApi = await fetch(url);\n  const {\n    meals\n  } = await responseApi.json();\n  const a = [randomize(meals), randomize(meals)];\n  return a;\n}\nexport async function getRandomFood(foodId) {\n  const url = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n  const responseApi = await fetch(url);\n  const {\n    meals\n  } = await responseApi.json();\n  let meal = randomize(meals);\n\n  if (foodId === meal.idMeal) {\n    meal = meals.find(({\n      idMeal\n    }) => idMeal !== meal.idMeal);\n  }\n\n  return meal;\n}\nexport async function getRandomDrinks() {\n  const url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\n  const responseApi = await fetch(url);\n  const {\n    drinks\n  } = await responseApi.json();\n  const {\n    idDrink,\n    strDrinkThumb,\n    strDrink,\n    strCategory,\n    strAlcoholic\n  } = randomize(drinks);\n  const obj = {\n    idMeal: idDrink,\n    strMealThumb: strDrinkThumb,\n    strMeal: strDrink,\n    strCategory,\n    strArea: strAlcoholic\n  };\n  return obj;\n}\nexport async function getPerfectObject() {\n  const food = await getRandomFoods();\n  const drink = await getRandomDrinks();\n  const breakfast = await getBreakfasts();\n  return [...food, ...breakfast, drink];\n}","map":{"version":3,"sources":["/home/dh/Repositorio/AppFood/src/services/RequestDiscover.js"],"names":["randomize","json","Math","floor","random","length","getFoodById","id","url","responseApi","fetch","meals","getBreakfasts","result","idMeal","getRandomFoods","a","getRandomFood","foodId","meal","find","getRandomDrinks","drinks","idDrink","strDrinkThumb","strDrink","strCategory","strAlcoholic","obj","strMealThumb","strMeal","strArea","getPerfectObject","food","drink","breakfast"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAOA,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,IAAI,CAACI,MAAhC,CAAD,CAAX;AACD;;AAED,OAAO,eAAeC,WAAf,CAA2BC,EAA3B,EAA+B;AACpC,QAAMC,GAAG,GAAI,wDAAuDD,EAAG,EAAvE;AACA,QAAME,WAAW,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA/B;AACA,QAAMP,IAAI,GAAG,MAAMQ,WAAW,CAACR,IAAZ,EAAnB;AACA,SAAOA,IAAI,CAACU,KAAZ;AACD;AAED,eAAe,eAAeC,aAAf,GAA+B;AAC5C,QAAMJ,GAAG,GAAG,gEAAZ;AACA,QAAMC,WAAW,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA/B;AACA,QAAMP,IAAI,GAAG,MAAMQ,WAAW,CAACR,IAAZ,EAAnB;AACA,QAAMY,MAAM,GAAG,MAAMP,WAAW,CAACN,SAAS,CAACC,IAAI,CAACU,KAAN,CAAT,CAAsBG,MAAvB,CAAhC;AAEA,SAAOD,MAAP;AACD;AAED,OAAO,eAAeE,cAAf,GAAgC;AACrC,QAAMP,GAAG,GAAG,uDAAZ;AACA,QAAMC,WAAW,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA/B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAY,MAAMF,WAAW,CAACR,IAAZ,EAAxB;AAEA,QAAMe,CAAC,GAAG,CAAChB,SAAS,CAACW,KAAD,CAAV,EAAmBX,SAAS,CAACW,KAAD,CAA5B,CAAV;AAEA,SAAOK,CAAP;AACD;AAED,OAAO,eAAeC,aAAf,CAA6BC,MAA7B,EAAqC;AAC1C,QAAMV,GAAG,GAAG,uDAAZ;AACA,QAAMC,WAAW,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA/B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAY,MAAMF,WAAW,CAACR,IAAZ,EAAxB;AAEA,MAAIkB,IAAI,GAAGnB,SAAS,CAACW,KAAD,CAApB;;AAEA,MAAIO,MAAM,KAAKC,IAAI,CAACL,MAApB,EAA4B;AAC1BK,IAAAA,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAW,CAAC;AAAEN,MAAAA;AAAF,KAAD,KAAgBA,MAAM,KAAKK,IAAI,CAACL,MAA3C,CAAP;AACD;;AAED,SAAOK,IAAP;AACD;AAED,OAAO,eAAeE,eAAf,GAAiC;AACtC,QAAMb,GAAG,GAAG,2DAAZ;AACA,QAAMC,WAAW,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA/B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAa,MAAMb,WAAW,CAACR,IAAZ,EAAzB;AACA,QACE;AAAEsB,IAAAA,OAAF;AAAWC,IAAAA,aAAX;AAA0BC,IAAAA,QAA1B;AAAoCC,IAAAA,WAApC;AAAiDC,IAAAA;AAAjD,MAAkE3B,SAAS,CAACsB,MAAD,CAD7E;AAEA,QAAMM,GAAG,GAAG;AAAEd,IAAAA,MAAM,EAAES,OAAV;AACVM,IAAAA,YAAY,EAAEL,aADJ;AAEVM,IAAAA,OAAO,EAAEL,QAFC;AAGVC,IAAAA,WAHU;AAIVK,IAAAA,OAAO,EAAEJ;AAJC,GAAZ;AAMA,SAAOC,GAAP;AACD;AAED,OAAO,eAAeI,gBAAf,GAAkC;AACvC,QAAMC,IAAI,GAAG,MAAMlB,cAAc,EAAjC;AACA,QAAMmB,KAAK,GAAG,MAAMb,eAAe,EAAnC;AACA,QAAMc,SAAS,GAAG,MAAMvB,aAAa,EAArC;AACA,SAAO,CAAC,GAAGqB,IAAJ,EAAU,GAAGE,SAAb,EAAwBD,KAAxB,CAAP;AACD","sourcesContent":["function randomize(json) {\n  return json[Math.floor(Math.random() * json.length)];\n}\n\nexport async function getFoodById(id) {\n  const url = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`;\n  const responseApi = await fetch(url);\n  const json = await responseApi.json();\n  return json.meals;\n}\n\nexport default async function getBreakfasts() {\n  const url = 'https://www.themealdb.com/api/json/v1/1/filter.php?c=breakfast';\n  const responseApi = await fetch(url);\n  const json = await responseApi.json();\n  const result = await getFoodById(randomize(json.meals).idMeal);\n\n  return result;\n}\n\nexport async function getRandomFoods() {\n  const url = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n  const responseApi = await fetch(url);\n  const { meals } = await responseApi.json();\n\n  const a = [randomize(meals), randomize(meals)];\n\n  return a;\n}\n\nexport async function getRandomFood(foodId) {\n  const url = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';\n  const responseApi = await fetch(url);\n  const { meals } = await responseApi.json();\n\n  let meal = randomize(meals);\n\n  if (foodId === meal.idMeal) {\n    meal = meals.find(({ idMeal }) => idMeal !== meal.idMeal);\n  }\n\n  return meal;\n}\n\nexport async function getRandomDrinks() {\n  const url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\n  const responseApi = await fetch(url);\n  const { drinks } = await responseApi.json();\n  const\n    { idDrink, strDrinkThumb, strDrink, strCategory, strAlcoholic } = randomize(drinks);\n  const obj = { idMeal: idDrink,\n    strMealThumb: strDrinkThumb,\n    strMeal: strDrink,\n    strCategory,\n    strArea: strAlcoholic };\n\n  return obj;\n}\n\nexport async function getPerfectObject() {\n  const food = await getRandomFoods();\n  const drink = await getRandomDrinks();\n  const breakfast = await getBreakfasts();\n  return [...food, ...breakfast, drink];\n}\n"]},"metadata":{},"sourceType":"module"}