{"ast":null,"code":"var _jsxFileName = \"/home/dh/projetos/sd-015-b-project-recipes-app/src/context/RecipesAppProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipesAppContext from './RecipesAppContext';\nimport RequisitionFood, { RequisitionFoodFirstName, RequisitionFoodName, getFoodByArea, RequisitionIdFood } from '../services/RequestDishes';\nimport RequisitionDrink, { getDrinksByIngredient, getDrinksById } from '../services/RequestDrinks';\n\nfunction RecipesAppProvider({\n  children\n}) {\n  const [dishesResquest, setDishesRequest] = useState({\n    type: '',\n    description: ''\n  });\n  const [drinksResquest, setDrinksRequest] = useState({\n    type: '',\n    description: ''\n  });\n  const [foodId, setFoodId] = useState();\n  const [drinkId, setDrinkId] = useState();\n  const [idDishes, setIdDishes] = useState([]);\n  const [idDrinks, setIdDrinks] = useState([]);\n  const [dishes, setDishes] = useState([]);\n  const [suggestionDishes, setSuggestionDishes] = useState([]);\n  const [drinks, setDrinks] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const firstLetter = 'primeira-letra';\n  useEffect(() => {\n    const {\n      description,\n      type\n    } = dishesResquest;\n\n    if (description === '') {\n      RequisitionFood('', 'i').then(response => setDishes(response));\n    }\n\n    if (type === 'ingrediente') {\n      RequisitionFood(description, 'i').then(response => setDishes(response));\n    }\n\n    if (description === 'area') {\n      getFoodByArea(type).then(response => setDishes(response));\n    }\n\n    if (type === 'nome') {\n      RequisitionFoodName(description).then(response => setDishes(response));\n    }\n\n    if (type === firstLetter && description.length > 1) {\n      global.alert('Sua busca deve conter somente 1 (um) caracter');\n    } else if (type === firstLetter && description) {\n      RequisitionFoodFirstName(description).then(response => setDishes(response));\n    }\n  }, [dishesResquest]);\n  useEffect(() => {\n    const {\n      description,\n      type\n    } = drinksResquest;\n\n    if (description === '') {\n      RequisitionDrink(description, 's').then(response => setDrinks(response));\n    }\n\n    if (type === 'nome') {\n      RequisitionDrink(description, 's').then(response => setDrinks(response));\n    }\n\n    if (type === firstLetter && description.length > 1) {\n      global.alert('Sua busca deve conter somente 1 (um) caracter');\n    } else if (type === firstLetter && description) {\n      RequisitionDrink(description, 'f').then(response => setDrinks(response));\n    }\n\n    if (type === 'ingrediente') {\n      getDrinksByIngredient(description, 'i').then(response => setDrinks(response));\n    }\n  }, [drinksResquest]);\n  useEffect(() => {\n    RequisitionIdFood(foodId).then(response => setIdDishes(response));\n  }, [foodId]);\n  useEffect(() => {\n    getDrinksById(drinkId).then(response => setIdDrinks(response));\n    RequisitionFoodName('').then(response => setSuggestionDishes(response));\n  }, [drinkId]);\n  return /*#__PURE__*/React.createElement(RecipesAppContext.Provider, {\n    value: {\n      dishesResquest,\n      setDishesRequest,\n      drinksResquest,\n      setDrinksRequest,\n      dishes,\n      drinks,\n      toggle,\n      setToggle,\n      setDrinks,\n      setDishes,\n      setFoodId,\n      setDrinkId,\n      idDishes,\n      idDrinks,\n      suggestionDishes\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nRecipesAppProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default RecipesAppProvider;","map":{"version":3,"sources":["/home/dh/projetos/sd-015-b-project-recipes-app/src/context/RecipesAppProvider.js"],"names":["React","useState","useEffect","PropTypes","RecipesAppContext","RequisitionFood","RequisitionFoodFirstName","RequisitionFoodName","getFoodByArea","RequisitionIdFood","RequisitionDrink","getDrinksByIngredient","getDrinksById","RecipesAppProvider","children","dishesResquest","setDishesRequest","type","description","drinksResquest","setDrinksRequest","foodId","setFoodId","drinkId","setDrinkId","idDishes","setIdDishes","idDrinks","setIdDrinks","dishes","setDishes","suggestionDishes","setSuggestionDishes","drinks","setDrinks","toggle","setToggle","firstLetter","then","response","length","global","alert","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipesAppContext from './RecipesAppContext';\nimport RequisitionFood, {\n  RequisitionFoodFirstName,\n  RequisitionFoodName, getFoodByArea,\n  RequisitionIdFood,\n} from '../services/RequestDishes';\nimport RequisitionDrink,\n{ getDrinksByIngredient, getDrinksById } from '../services/RequestDrinks';\n\nfunction RecipesAppProvider({ children }) {\n  const [dishesResquest, setDishesRequest] = useState({ type: '', description: '' });\n  const [drinksResquest, setDrinksRequest] = useState({ type: '', description: '' });\n  const [foodId, setFoodId] = useState();\n  const [drinkId, setDrinkId] = useState();\n  const [idDishes, setIdDishes] = useState([]);\n  const [idDrinks, setIdDrinks] = useState([]);\n  const [dishes, setDishes] = useState([]);\n  const [suggestionDishes, setSuggestionDishes] = useState([]);\n  const [drinks, setDrinks] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const firstLetter = 'primeira-letra';\n\n  useEffect(() => {\n    const { description, type } = dishesResquest;\n    if (description === '') {\n      RequisitionFood('', 'i').then((response) => setDishes(response));\n    }\n    if (type === 'ingrediente') {\n      RequisitionFood(description, 'i').then((response) => setDishes(response));\n    }\n    if (description === 'area') {\n      getFoodByArea(type).then((response) => setDishes(response));\n    }\n    if (type === 'nome') {\n      RequisitionFoodName(description)\n        .then((response) => setDishes(response));\n    }\n    if (type === firstLetter\n      && description.length > 1) {\n      global.alert('Sua busca deve conter somente 1 (um) caracter');\n    } else if (type === firstLetter && description) {\n      RequisitionFoodFirstName(description)\n        .then((response) => setDishes(response));\n    }\n  }, [dishesResquest]);\n\n  useEffect(() => {\n    const { description, type } = drinksResquest;\n    if (description === '') {\n      RequisitionDrink(description, 's').then((response) => setDrinks(response));\n    }\n    if (type === 'nome') {\n      RequisitionDrink(description, 's').then((response) => setDrinks(response));\n    }\n    if (type === firstLetter\n       && description.length > 1) {\n      global.alert('Sua busca deve conter somente 1 (um) caracter');\n    } else if (type === firstLetter\n        && description) {\n      RequisitionDrink(description, 'f').then((response) => setDrinks(response));\n    }\n    if (type === 'ingrediente') {\n      getDrinksByIngredient(description, 'i').then((response) => setDrinks(response));\n    }\n  }, [drinksResquest]);\n\n  useEffect(() => {\n    RequisitionIdFood(foodId).then((response) => setIdDishes(response));\n  }, [foodId]);\n\n  useEffect(() => {\n    getDrinksById(drinkId).then((response) => setIdDrinks(response));\n    RequisitionFoodName('')\n      .then((response) => setSuggestionDishes(response));\n  }, [drinkId]);\n\n  return (\n    <RecipesAppContext.Provider\n      value={ {\n        dishesResquest,\n        setDishesRequest,\n        drinksResquest,\n        setDrinksRequest,\n        dishes,\n        drinks,\n        toggle,\n        setToggle,\n        setDrinks,\n        setDishes,\n        setFoodId,\n        setDrinkId,\n        idDishes,\n        idDrinks,\n        suggestionDishes } }\n    >\n      { children }\n    </RecipesAppContext.Provider>\n  );\n}\n\nRecipesAppProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default RecipesAppProvider;\n"]},"metadata":{},"sourceType":"module"}