{"ast":null,"code":"import _slicedToArray from\"/home/dh/Repositorio/appfood/AppFood/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import blackHeartIcon from\"../images/blackHeartIcon.svg\";import whiteHeartIcon from\"../images/whiteHeartIcon.svg\";import{saveInFavorites}from'../services/Functions';export default function FavoriteButton(_ref){var recipe=_ref.recipe,id=_ref.id,type=_ref.type;var _useState=useState(),_useState2=_slicedToArray(_useState,2),isFavorite=_useState2[0],setIsFavorite=_useState2[1];useEffect(function(){var currentFavorites=JSON.parse(localStorage.getItem('favoriteRecipes'));if(currentFavorites){var isAlreadyFavorited=currentFavorites.find(function(recipee){return recipee.id===id;});if(isAlreadyFavorited)setIsFavorite(true);}else setIsFavorite(false);},[id]);useEffect(function(){var currentFavorites=JSON.parse(localStorage.getItem('favoriteRecipes'));if(isFavorite){if(currentFavorites){currentFavorites.push(saveInFavorites(recipe,type));localStorage.setItem('favoriteRecipes',JSON.stringify(currentFavorites));}else{var newFavorite=[saveInFavorites(recipe,type)];localStorage.setItem('favoriteRecipes',JSON.stringify(newFavorite));}}else if(currentFavorites){var newFavorites=currentFavorites.filter(function(recipee){return recipee.id!==id;});localStorage.setItem('favoriteRecipes',JSON.stringify(newFavorites));}},[id,isFavorite,recipe,type]);return/*#__PURE__*/React.createElement(\"button\",{type:\"button\",onClick:function onClick(){return setIsFavorite(!isFavorite);}},isFavorite?/*#__PURE__*/React.createElement(\"img\",{\"data-testid\":\"favorite-btn\",src:blackHeartIcon,alt:\"favorited\"}):/*#__PURE__*/React.createElement(\"img\",{\"data-testid\":\"favorite-btn\",src:whiteHeartIcon,alt:\"favorite\"}));}","map":{"version":3,"sources":["/home/dh/Repositorio/appfood/AppFood/src/components/FavoriteButton.jsx"],"names":["React","useEffect","useState","saveInFavorites","FavoriteButton","recipe","id","type","isFavorite","setIsFavorite","currentFavorites","JSON","parse","localStorage","getItem","isAlreadyFavorited","find","recipee","push","setItem","stringify","newFavorite","newFavorites","filter","blackHeartIcon","whiteHeartIcon"],"mappings":"2JAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,C,kHAIA,OAASC,eAAT,KAAgC,uBAAhC,CAEA,cAAe,SAASC,CAAAA,cAAT,MAA8C,IAApBC,CAAAA,MAAoB,MAApBA,MAAoB,CAAZC,EAAY,MAAZA,EAAY,CAARC,IAAQ,MAARA,IAAQ,eACvBL,QAAQ,EADe,wCACpDM,UADoD,eACxCC,aADwC,eAG3DR,SAAS,CAAC,UAAM,CACd,GAAMS,CAAAA,gBAAgB,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAzB,CACA,GAAIJ,gBAAJ,CAAsB,CACpB,GAAMK,CAAAA,kBAAkB,CAAGL,gBAAgB,CAACM,IAAjB,CAAsB,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACX,EAAR,GAAeA,EAA5B,EAAtB,CAA3B,CACA,GAAIS,kBAAJ,CAAwBN,aAAa,CAAC,IAAD,CAAb,CACzB,CAHD,IAGOA,CAAAA,aAAa,CAAC,KAAD,CAAb,CACR,CANQ,CAMN,CAACH,EAAD,CANM,CAAT,CAQAL,SAAS,CAAC,UAAM,CACd,GAAMS,CAAAA,gBAAgB,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAAzB,CACA,GAAIN,UAAJ,CAAgB,CACd,GAAIE,gBAAJ,CAAsB,CACpBA,gBAAgB,CAACQ,IAAjB,CAAsBf,eAAe,CAACE,MAAD,CAASE,IAAT,CAArC,EACAM,YAAY,CAACM,OAAb,CAAqB,iBAArB,CAAwCR,IAAI,CAACS,SAAL,CAAeV,gBAAf,CAAxC,EACD,CAHD,IAGO,CACL,GAAMW,CAAAA,WAAW,CAAG,CAAClB,eAAe,CAACE,MAAD,CAASE,IAAT,CAAhB,CAApB,CACAM,YAAY,CAACM,OAAb,CAAqB,iBAArB,CAAwCR,IAAI,CAACS,SAAL,CAAeC,WAAf,CAAxC,EACD,CACF,CARD,IAQO,IAAIX,gBAAJ,CAAsB,CAC3B,GAAMY,CAAAA,YAAY,CAAGZ,gBAAgB,CAACa,MAAjB,CAAwB,SAACN,OAAD,QAAaA,CAAAA,OAAO,CAACX,EAAR,GAAeA,EAA5B,EAAxB,CAArB,CACAO,YAAY,CAACM,OAAb,CAAqB,iBAArB,CAAwCR,IAAI,CAACS,SAAL,CAAeE,YAAf,CAAxC,EACD,CACF,CAdQ,CAcN,CAAChB,EAAD,CAAKE,UAAL,CAAiBH,MAAjB,CAAyBE,IAAzB,CAdM,CAAT,CAgBA,mBACE,8BACE,IAAI,CAAC,QADP,CAEE,OAAO,CAAG,yBAAME,CAAAA,aAAa,CAAC,CAACD,UAAF,CAAnB,EAFZ,EAKIA,UAAU,cACL,2BAAK,cAAY,cAAjB,CAAgC,GAAG,CAAGgB,cAAtC,CAAuD,GAAG,CAAC,WAA3D,EADK,cAEL,2BAAK,cAAY,cAAjB,CAAgC,GAAG,CAAGC,cAAtC,CAAuD,GAAG,CAAC,UAA3D,EAPT,CADF,CAYD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport { saveInFavorites } from '../services/Functions';\n\nexport default function FavoriteButton({ recipe, id, type }) {\n  const [isFavorite, setIsFavorite] = useState();\n\n  useEffect(() => {\n    const currentFavorites = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    if (currentFavorites) {\n      const isAlreadyFavorited = currentFavorites.find((recipee) => recipee.id === id);\n      if (isAlreadyFavorited) setIsFavorite(true);\n    } else setIsFavorite(false);\n  }, [id]);\n\n  useEffect(() => {\n    const currentFavorites = JSON.parse(localStorage.getItem('favoriteRecipes'));\n    if (isFavorite) {\n      if (currentFavorites) {\n        currentFavorites.push(saveInFavorites(recipe, type));\n        localStorage.setItem('favoriteRecipes', JSON.stringify(currentFavorites));\n      } else {\n        const newFavorite = [saveInFavorites(recipe, type)];\n        localStorage.setItem('favoriteRecipes', JSON.stringify(newFavorite));\n      }\n    } else if (currentFavorites) {\n      const newFavorites = currentFavorites.filter((recipee) => recipee.id !== id);\n      localStorage.setItem('favoriteRecipes', JSON.stringify(newFavorites));\n    }\n  }, [id, isFavorite, recipe, type]);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={ () => setIsFavorite(!isFavorite) }\n    >\n      {\n        isFavorite\n          ? (<img data-testid=\"favorite-btn\" src={ blackHeartIcon } alt=\"favorited\" />)\n          : (<img data-testid=\"favorite-btn\" src={ whiteHeartIcon } alt=\"favorite\" />)\n      }\n    </button>\n  );\n}\n\nFavoriteButton.propTypes = {\n  recipe: PropTypes.objectOf(PropTypes.any).isRequired,\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}